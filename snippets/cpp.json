{
	/* List of Variant types:

		NIL,BOOL,INT,REAL,STRING,VECTOR2,RECT2,VECTOR3,TRANSFORM2D,PLANE,QUAT,AABB,BASIS,TRANSFORM,COLOR,NODE_PATH,_RID,OBJECT,DICTIONARY,ARRAY,POOL_BYTE_ARRAY,POOL_INT_ARRAY,POOL_REAL_ARRAY,POOL_STRING_ARRAY,POOL_VECTOR2_ARRAY,POOL_VECTOR3_ARRAY,POOL_COLOR_ARRAY
	*/

	/* Class regex substitution from filename:

		${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}

		Based on: https://stackoverflow.com/questions/48104851/snippet-regex-match-arbitrary-number-of-groups-and-transform-to-camelcase
	*/

	// Binding snippets

	  "Godot C++ Define `_bind_methods()`": {
		"prefix": "godot-define-bind-methods",
		"body": [
		  "void ${2:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::_bind_methods() {",
		  "\t$0",
		  "}"
		],
		"description": "Godot C++ Define `_bind_methods()`"
	  },
	  "Godot C++ Define ClassDB bind method": {
		"prefix": "godot-bind-method",
		"body": [
		  "ClassDB::bind_method(D_METHOD(\"${1:name}\"), &${2:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::${1:name});",
		],
		"description": "Godot C++ Define ClassDB bind method"
	  },
	  "Godot C++ Define ClassDB set/get bind methods": {
		"prefix": "godot-bind-method-setget",
		"body": [
		  "ClassDB::bind_method(D_METHOD(\"set_${1:name}\", \"${1:name}\"), &${2:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::set_${1:name});",
		  "ClassDB::bind_method(D_METHOD(\"${3:get}_${1:name}\"), &${2:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::${3:get}_${1:name});"
		],
		"description": "Godot C++ Define ClassDB set/get bind methods"
	  },
	  "Godot C++ Add Property": {
		"prefix": "godot-add-property",
		"body": [
		  "ADD_PROPERTY(PropertyInfo(Variant::${1|NIL,BOOL,INT,REAL,STRING,VECTOR2,RECT2,VECTOR3,TRANSFORM2D,PLANE,QUAT,AABB,BASIS,TRANSFORM,COLOR,NODE_PATH,_RID,OBJECT,DICTIONARY,ARRAY,POOL_BYTE_ARRAY,POOL_INT_ARRAY,POOL_REAL_ARRAY,POOL_STRING_ARRAY,POOL_VECTOR2_ARRAY,POOL_VECTOR3_ARRAY,POOL_COLOR_ARRAY|}, \"${2:name}\"), \"set_${2:name}\", \"${3:get}_${2:name}\");"
		],
		"description": "Godot C++ Add Property"
	  },
	  "Godot C++ Add Signal": {
		"prefix": "godot-add-signal",
		"body": [
		  "ADD_SIGNAL(MethodInfo(\"${1:name}\", PropertyInfo(Variant::${2|NIL,BOOL,INT,REAL,STRING,VECTOR2,RECT2,VECTOR3,TRANSFORM2D,PLANE,QUAT,AABB,BASIS,TRANSFORM,COLOR,NODE_PATH,_RID,OBJECT,DICTIONARY,ARRAY,POOL_BYTE_ARRAY,POOL_INT_ARRAY,POOL_REAL_ARRAY,POOL_STRING_ARRAY,POOL_VECTOR2_ARRAY,POOL_VECTOR3_ARRAY,POOL_COLOR_ARRAY|}, \"${3:arg_name}\")));"
		],
		"description": "Godot C++ Add Signal"
	  },
	  "Godot C++ Bind Constant": {
		"prefix": "godot-bind-constant",
		"body": [
		  "BIND_CONSTANT(${1:name});"
		],
		"description": "Godot C++ Bind Constant"
	  },
	  "Godot C++ Bind Enum Constant": {
		"prefix": "godot-bind-enum-constant",
		"body": [
		  "BIND_ENUM_CONSTANT(${1:name});"
		],
		"description": "Godot C++ Bind Enum Constant"
	  },

	  // Class snippets

	  //// Declare

	  "Godot C++ Declare Class": {
		"prefix": "godot-declare-class",
		"body": [
		  "class ${1:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}} : public ${2:extends} {",
		  "\tGDLASS(${1:name}, ${2:extends});",
		  "",
		  "private:",
		  "\t$0",
		  "\t",
		  "protected:",
		  "\tstatic void _bind_methods();",
		  "",
		  "public:",
		  "\t${1:name}();",
		  "\t~${1:name}();",
		  "};"
		],
		"description": "Godot C++ Declare Class"
	  },
	  "Godot C++ Declare set/get member methods": {
		"prefix": "godot-declare-setget",
		"body": [
		  "void set_${1:name}(${2:int} p_${1:name});",
		  "${2:int} ${3:get}_${1:name}() const;"
		],
		"description": "Godot C++ Declare set/get member methods"
	  },
	  "Godot C++ Declare set/get member methods for Node": {
		"prefix": "godot-declare-setget-node",
		"body": [
		  "void set_${1:name}(${2:Node} *p_${1:name});",
		  "${2:class} *${3:get}_${1:name}() const;"
		],
		"description": "Godot C++ Declare set/get member methods for Node"
	  },
	  "Godot C++ Declare set/get member methods for Reference": {
		"prefix": "godot-declare-setget-ref",
		"body": [
		  "void set_${1:name}(Ref<${2:class}> p_${1:name});",
		  "Ref<${2:class}> ${3:get}_${1:name}() const;"
		],
		"description": "Godot C++ Declare set/get member methods for Reference"
	  },
	  "Godot C++ Declare set/get member methods for constant Reference": {
		"prefix": "godot-declare-setget-const-ref",
		"body": [
		  "void set_${1:name}(const Ref<${2:class}> &p_${1:name});",
		  "Ref<${2:class}> ${3:get}_${1:name}() const;"
		],
		"description": "Godot C++ Declare set/get member methods for constant Reference"
	  },

	  //// Define

	  "Godot C++ Define set/get member methods": {
		"prefix": "godot-define-setget",
		"body": [
		  "void ${1:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::set_${2:name}(${3:int} p_${2:name}) {",
		  "",
		  "\t${2:name} = p_${2:name};",
		  "}",
		  "",
		  "${3:int} ${1:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::get_${2:name}() const {",
		  "",
		  "\treturn ${2:name};",
		  "}"
		],
		"description": "Godot C++ Define set/get member methods"
	  },
	  "Godot C++ Define set/get member methods for Node": {
		"prefix": "godot-define-setget-node",
		"body": [
		  "void ${1:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::set_${2:name}(${3:Node} *p_${2:name}) {",
		  "",
		  "\t${2:name} = p_${2:name};",
		  "}",
		  "",
		  "${3:Node} *${1:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::get_${2:name}() const {",
		  "",
		  "\treturn ${2:name};",
		  "}"
		],
		"description": "Godot C++ Define set/get member methods for Node"
	  },
	  "Godot C++ Define set/get member methods for Reference": {
		"prefix": "godot-define-setget-ref",
		"body": [
		  "void ${1:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::set_${2:name}(Ref<${3:class}> p_${2:name}) {",
		  "",
		  "\t${2:name} = p_${2:name};",
		  "}",
		  "",
		  "Ref<${3:Node}> ${1:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::get_${2:name}() const {",
		  "",
		  "\treturn ${2:name};",
		  "}"
		],
		"description": "Godot C++ Define set/get member methods for Reference"
	  },
	  "Godot C++ Define set/get member methods for const Reference": {
		"prefix": "godot-define-setget-const-ref",
		"body": [
		  "void ${1:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::set_${2:name}(const Ref<${3:class}> &p_${2:name}) {",
		  "",
		  "\t${2:name} = p_${2:name};",
		  "}",
		  "",
		  "Ref<${3:Node}> ${1:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::get_${2:name}() const {",
		  "",
		  "\treturn ${2:name};",
		  "}"
		],
		"description": "Godot C++ Define set/get member methods for const Reference"
		},

		// Assertions
		"Godot C++ Error Fail Condition Explained": {
			"prefix": "godot-err-fail-cond-explain",
			"body": [
				"ERR_EXPLAIN(\"${1:message}\");",
				"ERR_FAIL_COND(${2:condition});"
			],
			"description": "Godot C++ Error Fail Condition Explained"
		},
		"Godot C++ Error Fail Condition With Return Value Explained": {
			"prefix": "godot-err-fail-cond-v-explain",
			"body": [
				"ERR_EXPLAIN(\"${1:message}\");",
				"ERR_FAIL_COND_V(${2:condition}, ${3:NULL,int,float,double|});"
			],
			"description": "Godot C++ Error Fail Condition With Return Value Explained"
		},

	  // Misc

	  "Godot C++ Variant Enum Cast": {
		"prefix": "godot-variant-enum-cast",
		"body": [
		  "VARIANT_ENUM_CAST(${1:${TM_FILENAME_BASE/([A-Za-z0-9]*)_+([A-Za-z0-9]*)/${1:/capitalize}${2:/capitalize}/g}}::${2:enum});"
		],
		"description": "Godot C++ Variant Enum Cast"
	  }
}
