{
	/* List of Variant types:

		PLACEHOLDER_VARIANT_TYPES
	*/

	/* Class regex substitution from filename:

		${PLACEHOLDER_CLASS}

		Based on: https://stackoverflow.com/questions/48104851/snippet-regex-match-arbitrary-number-of-groups-and-transform-to-camelcase
	*/

	// Binding snippets

	  "Godot Define `_bind_methods()`": {
		"prefix": "godot-define-bind-methods",
		"body": [
		  "void ${2:${PLACEHOLDER_CLASS}}::_bind_methods() {",
		  "\t$0",
		  "}"
		],
		"description": "Godot Define `_bind_methods()`"
	  },
	  "Godot Define ClassDB bind method": {
		"prefix": "godot-bind-method",
		"body": [
		  "ClassDB::bind_method(D_METHOD(\"${1:name}\"), &${2:${PLACEHOLDER_CLASS}}::${1:name});",
		],
		"description": "Godot Define ClassDB bind method"
	  },
	  "Godot Define ClassDB set/get bind methods": {
		"prefix": "godot-setget-bind-method",
		"body": [
		  "ClassDB::bind_method(D_METHOD(\"set_${1:name}\", \"${1:name}\"), &${2:${PLACEHOLDER_CLASS}}::set_${1:name});",
		  "ClassDB::bind_method(D_METHOD(\"${3:get}_${1:name}\"), &${2:${PLACEHOLDER_CLASS}}::${3:get}_${1:name});"
		],
		"description": "Godot Define ClassDB set/get bind methods"
	  },
	  "Godot Add Property": {
		"prefix": "godot-add-property",
		"body": [
		  "ADD_PROPERTY(PropertyInfo(Variant::${1|PLACEHOLDER_VARIANT_TYPES|}, \"${2:name}\"), \"set_${2:name}\", \"${3:get}_${2:name}\");"
		],
		"description": "Godot Add Property"
	  },
	  "Godot Add Signal": {
		"prefix": "godot-add-signal",
		"body": [
		  "ADD_SIGNAL(MethodInfo(\"${1:name}\", PropertyInfo(Variant::${2|PLACEHOLDER_VARIANT_TYPES|}, \"${3:arg_name}\")));"
		],
		"description": "Godot Add Signal"
	  },
	  "Godot Bind Constant": {
		"prefix": "godot-bind-constant",
		"body": [
		  "BIND_CONSTANT(${1:name});"
		],
		"description": "Godot Bind Constant"
	  },
	  "Godot Bind Enum Constant": {
		"prefix": "godot-bind-enum-constant",
		"body": [
		  "BIND_ENUM_CONSTANT(${1:name});"
		],
		"description": "Godot Bind Enum Constant"
	  },

	  // Class and member functions snippets

	  //// Declare

	  "Godot Declare Class": {
		"prefix": "godot-class",
		"body": [
		  "class ${1:${PLACEHOLDER_CLASS}} : public ${2:extends} {",
		  "\tGDLASS(${1:name}, ${2:extends});",
		  "",
		  "private:",
		  "\t$0",
		  "\t",
		  "protected:",
		  "\tstatic void _bind_methods();",
		  "",
		  "public:",
		  "\t${1:name}();",
		  "\t~${1:name}();",
		  "};"
		],
		"description": "Declare Godot Class"
	  },
	  "Godot Declare set/get member methods": {
		"prefix": "godot-setget-declare",
		"body": [
		  "void set_${1:name}(${2:int} p_${1:name});",
		  "${2:int} ${3:get}_${1:name}() const;"
		],
		"description": "Declare set/get member methods"
	  },
	  "Godot Declare set/get member methods for Node": {
		"prefix": "godot-setget-node-declare",
		"body": [
		  "void set_${1:node}(${2:Node} *p_${1:node});",
		  "${2:Node} *get_${1:node}() const;"
		],
		"description": "Declare set/get member methods for Node"
	  },
	  "Godot Declare set/get member methods for Reference": {
		"prefix": "godot-setget-ref-declare",
		"body": [
		  "void set_${1:member}(Ref<${2:class}> p_${1:member});",
		  "Ref<${2:class}> get_${1:member}() const;"
		],
		"description": "Declare set/get member methods for Reference"
	  },
	  "Godot Declare set/get member methods for constant Reference": {
		"prefix": "godot-setget-const-ref-declare",
		"body": [
		  "void set_${1:member}(const Ref<${2:class}> &p_${1:member});",
		  "Ref<${2:class}> get_${1:member}() const;"
		],
		"description": "Declare set/get member methods for constant Reference"
	  },

	  //// Define

	  "Godot Define set/get member methods": {
		"prefix": "godot-setget-define",
		"body": [
		  "void ${1:${PLACEHOLDER_CLASS}}::set_${2:member}(${3:int} p_${2:member}) {",
		  "",
		  "\t${2:member} = p_${2:member};",
		  "}",
		  "",
		  "${3:int} ${1:${PLACEHOLDER_CLASS}}::${4:get}_${2:member}() const {",
		  "",
		  "\treturn ${2:member};",
		  "}"
		],
		"description": "Defines set/get member methods"
	  },
	  "Godot Define set/get member methods for Node": {
		"prefix": "godot-setget-node-define",
		"body": [
		  "void ${1:${PLACEHOLDER_CLASS}}::set_${2:name}(${3:Node} *p_${2:node}) {",
		  "",
		  "\t${2:node} = p_${2:node};",
		  "}",
		  "",
		  "${3:Node} *${1:${PLACEHOLDER_CLASS}}::get_${2:node}() const {",
		  "",
		  "\treturn ${2:node};",
		  "}"
		],
		"description": "Defines set/get member methods for Node"
	  },
	  "Godot Define set/get member methods for Reference": {
		"prefix": "godot-setget-ref-define",
		"body": [
		  "void ${1:${PLACEHOLDER_CLASS}}::set_${2:member}(Ref<${3:class}> p_${2:member}) {",
		  "",
		  "\t${2:member} = p_${2:member};",
		  "}",
		  "",
		  "Ref<${3:class}> ${1:${PLACEHOLDER_CLASS}}::get_${2:member}() const {",
		  "",
		  "\treturn ${2:member};",
		  "}"
		],
		"description": "Defines set/get member methods for Reference"
	  },
	  "Godot Define set/get member methods for const Reference": {
		"prefix": "godot-setget-const-ref-define",
		"body": [
		  "void ${1:${PLACEHOLDER_CLASS}}::set_${2:member}(const Ref<${3:class}> &p_${2:member}) {",
		  "",
		  "\t${2:member} = p_${2:member};",
		  "}",
		  "",
		  "Ref<${3:class}> ${1:${PLACEHOLDER_CLASS}}::get_${2:member}() const {",
		  "",
		  "\treturn ${2:member};",
		  "}"
		],
		"description": "Defines set/get member methods for const Reference"
		},

		// Assertions

		"Godot Error Fail Index": {
			"prefix": "godot-err-fail-index",
			"body": [
				"ERR_EXPLAIN(\"${1:message}\");",
				"ERR_FAIL_INDEX(${2:idx}, ${3:size});"
			],
			"description": "An index has failed if index < 0 or index >= size, the function will exit."
		},
		"Godot Error Fail Index With Return Value": {
			"prefix": "godot-err-fail-index-v",
			"body": [
				"ERR_EXPLAIN(\"${1:message}\");",
				"ERR_FAIL_INDEX_V(${2:idx}, ${3:size}, ${4|NULL,int,float,double|});"
			],
			"description": "An index has failed if index < 0 or index >= size, the function will exit with return value."
		},
		"Godot Error Fail Condition": {
			"prefix": "godot-err-fail-cond",
			"body": [
				"ERR_EXPLAIN(\"${1:message}\");",
				"ERR_FAIL_COND(${2:condition});"
			],
			"description": "An error condition happened (condition tested true) (WARNING this is the opposite as assert(), the function will exit."
		},
		"Godot Error Fail Condition With Return Value": {
			"prefix": "godot-err-fail-cond-v",
			"body": [
				"ERR_EXPLAIN(\"${1:message}\");",
				"ERR_FAIL_COND_V(${2:condition}, ${3|NULL,int,float,double|});"
			],
			"description": "An error condition happened (condition tested true) (WARNING this is the opposite as assert(). The function will exit with return value."
		},

		// Casting

	  "Godot Object Cast": {
		"prefix": "godot-cast",
		"body": [
		  "Object::cast_to<${1:${PLACEHOLDER_CLASS}}>(${2:object});"
		],
		"description": "Godot style casting"
	  },

	  "Godot Variant Enum Cast": {
		"prefix": "godot-variant-enum-cast",
		"body": [
		  "VARIANT_ENUM_CAST(${1:${PLACEHOLDER_CLASS}}::${2:enum});"
		],
		"description": "Casts an enum for Variant"
	  }
}
